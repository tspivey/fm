#!/usr/bin/env python3
import sys
import os
from pathlib import Path
import termios
import tty
import fnmatch
import configparser
import re
import readline
import shlex
import shutil
import subprocess
try:
	import send2trash
except ImportError:
	print("Cannot import send2trash. Try installing it (e.g. through the python3-send2trash package in your distribution).")
	sys.exit(1)


def readchar():
	old_settings = termios.tcgetattr(sys.stdin.fileno())
	new_settings = list(old_settings)
	tty.cfmakeraw(new_settings)
	try:
		termios.tcsetattr(sys.stdin.fileno(), termios.TCSAFLUSH, new_settings)
		ch = os.read(sys.stdin.fileno(), 10).decode('utf-8')
		return ch
	finally:
		termios.tcsetattr(sys.stdin.fileno(), termios.TCSANOW, old_settings)

class Tab:
	def __init__(self):
		self.files: list[Path] = []
		self.dir = None
		self.cur = 0

	def read_directory(self, dir):
		dir = self.dir = Path(dir).absolute()
		entries = []
		for e in os.scandir(dir):
			entries.append(dir / e.name)
		self.files = entries
		self.cur = 0
		self.current_sort = 'name-asc'

	def sort(self, how):
		reverse = False
		if how == 'name-asc':
			def key(x): return x.name.lower()
		elif how == 'name-desc':
			def key(x): return x.name.lower()
			reverse = True
		elif how == 'size-asc':
			def key(x): return x.stat(follow_symlinks=False).st_size
		elif how == 'size-desc':
			def key(x): return x.stat(follow_symlinks=False).st_size
			reverse = True
		elif how == 'time-asc':
			def key(x): return x.stat(follow_symlinks=False).st_mtime_ns
		elif how == 'time-desc':
			def key(x): return x.stat(follow_symlinks=False).st_mtime_ns
			reverse = True
		else:
			raise RuntimeError(f"Unknown sort method {how}")
		self.files.sort(key=key, reverse=reverse)
		self.current_sort = how

	def focus(self, name):
		for i, f in enumerate(self.files):
			if f.name == name:
				self.cur = i
				return

	def remove(self, f):
		idx = self.files.index(f)
		del self.files[idx]
		self.fix_cur()

	def fix_cur(self):
		if self.cur > len(self.files) - 1:
			self.cur = len(self.files) - 1
		if self.cur < 0:
			self.cur = 0

	def search(self, query, reverse=False):
		t = fnmatch.translate(query)
		t = "(?i)" + t
		if reverse:
			r = range(self.cur - 1, -1, -1)
		else:
			r = range(self.cur + 1, len(self.files))
		for i in r:
			if re.match(t, self.files[i].name):
				self.cur = i
				return True
		return False

	def refresh(self):
		self.read_directory(self.dir)
		self.sort(self.current_sort)

class FileManager:
	def __init__(self):
		self.current_tab = 0
		self.tabs = []
		self.cols, self.rows = os.get_terminal_size()
		self.config = configparser.ConfigParser()
		self.search_query = ''

	@property
	def tab(self):
		return self.tabs[self.current_tab]

	def run(self):
		self.write(f"\x1b[{self.rows};1H\x1b[2k")
		self.display_current_filename()
		while True:
			ch = readchar()
			if ch == 'q':
				self.write('\r\n')
				sys.exit(0)
			elif ch == ' ':
				self.display_current_filename(True)
			elif ch == '\x1b[A':
				self.move_up()
			elif ch == '\x1b[B':
				self.move_down()
			elif ch == 'b':
				self.tab.cur = 0
				print("\r\ntop")
				self.display_current_filename()
			elif ch == '\r':
				try:
					self.open_file()
				except OSError as e:
					self.write(f"\nError reading directory: {e.strerror}\n")
					self.display_current_filename()
			elif ch == '.':
				self.go_to_parent()
			elif ch == 'g':
				try:
					self.go_to_directory()
				except OSError as e:
					self.write(f"\nError reading directory: {e.strerror}\n")
				self.display_current_filename()
			elif ch == 'd':
				self.delete()
				self.display_current_filename()
			elif ch == 'D':
				self.delete(trash=False)
				self.display_current_filename()
			elif ch == 's':
				self.display_size()
			elif ch == '/':
				self.do_search()
			elif ch == 'n':
				self.write('\n')
				self.search_next()
			elif ch == 'N':
				self.write('\n')
				self.search_previous()
			elif ch == '!':
				self.shell()
				self.refresh(self.tab)
				self.display_current_filename()
			elif ch == 'r':
				try:
					self.rename()
				except OSError as e:
					self.write(f"Error: {e}\n")
				self.display_current_filename()
			elif ch == '\x14': # ^T
				self.do_new_tab(os.environ['HOME'])
			elif ch == '\x17': # ^W
				self.close_tab()
			elif ch in '0123456789':
				if ch == '0':
					idx = 9
				else:
					idx = ord(ch) - 49
				if len(self.tabs) - 1 < idx:
					continue
				self.switch_to_tab(idx)
			elif ch == 'm':
				self.move()
				self.display_current_filename()
			elif ch == 'c':
				self.copy()
				self.display_current_filename()
			elif ch == 'e':
				self.edit()
				self.write(f"\x1b[{self.rows};1H\x1b[2k")
				self.display_current_filename()

	def display_current_filename(self, full=False):
		self.write('\x1b[2K\r')
		if len(self.tab.files) == 0:
			self.write('Empty directory')
			return
		filename = self.tab.files[self.tab.cur].name
		if self.tab.files[self.tab.cur].is_symlink():
			filename += "@"
		if self.tab.files[self.tab.cur].is_dir():
			filename += '/'
		if len(filename) > self.cols and not full:
			filename = filename[:self.cols - 1] + "$"
		self.write(filename+'\r')

	def write(self, s):
		sys.stdout.write(s)
		sys.stdout.flush()

	def move_up(self):
		self.tab.cur -= 1
		if self.tab.cur < 0:
			self.tab.cur = 0
		self.display_current_filename()

	def move_down(self):
		self.tab.cur += 1
		if self.tab.cur > len(self.tab.files) - 1:
			self.tab.cur = len(self.tab.files) - 1
		self.display_current_filename()

	def open_file(self):
		if len(self.tab.files) == 0:
			return
		file = self.tab.files[self.tab.cur]
		if file.is_dir():
			self.read_directory(file)
			self.display_current_filename()
			return
		else: # File, run it
			if 'opener' not in self.config['general']:
				print("No opener defined in configuration")
				self.display_current_filename()
				return
			opener = os.path.expanduser(self.config["general"]['opener'])
			subprocess.call([opener, str(file)])
			self.display_current_filename()

	def go_to_parent(self):
		assert self.tab.dir is not None
		if str(self.tab.dir) == '/':
			print("\nAlready at root")
			self.display_current_filename()
			return
		parent = self.tab.dir.parent
		name = self.tab.dir.name
		self.read_directory(parent)
		self.tab.focus(name)
		self.display_current_filename()

	def go_to_directory(self):
		d = input("Go to directory: ")
		d = Path(os.path.expanduser(d))
		if not d.is_absolute():
			d = self.tab.dir / d
		if not os.path.isdir(d):
			print("Not a directory")
			return
		self.read_directory(d)

	def delete(self, trash=True):
		tab = self.tab
		if not tab.files:
			return
		f = tab.files[tab.cur]
		if trash:
			self.write(f"Trash {f.name}? (y/n)")
		else:
			self.write(f"Permanently delete {f.name}? (y/n)")
		answer = self.yes_no()
		if not answer:
			return
		self.write('\n')
		if trash:
			send2trash.send2trash(f)
		else:
			try:
				os.unlink(f)
			except IsADirectoryError:
				shutil.rmtree(f)
		print("Ok")
		tab.remove(f)

	def yes_no(self):
		while True:
			answer = readchar()
			if answer == 'y':
				return True
			elif answer == 'n':
				return False

	def display_size(self):
		if len(self.tab.files) == 0:
			return
		self.write(f"\x1b[1;{self.rows-1}r\x1b[{self.rows-1};1H\n")
		subprocess.call(['du', '-hs', '--apparent-size', self.tab.files[self.tab.cur]])
		self.write(f"\x1b[H\x1bM\x1b[r\x1b[{self.rows};1H")

	def do_search(self):
		self.write('\n')
		self.search_query = input("Search: ")
		self.search_next()

	def search_next(self):
		found = self.tab.search(self.search_query)
		if not found:
			self.write("Not found\n")
		self.display_current_filename()

	def search_previous(self):
		found = self.tab.search(self.search_query, reverse=True)
		if not found:
			print("Not found")
		self.display_current_filename()

	def shell(self):
		self.write('\n')
		subprocess.call([os.environ["SHELL"]], cwd=self.tab.dir)
		self.write(f"\x1b[{self.rows};1H\x1b[2k")

	def rename(self):
		if len(self.tab.files) == 0:
			return
		self.write('\n')
		def f():
			readline.set_startup_hook()
			readline.insert_text(self.tab.files[self.tab.cur].name)
		readline.set_startup_hook(f)
		try:
			new_name = input("Rename: ")
		except KeyboardInterrupt:
			return
		assert self.tab.dir is not None
		new_path = self.tab.dir / new_name
		if new_path.exists():
			self.write(f"Error, path already exists: {new_path}\n")
			return
		self.tab.files[self.tab.cur].rename(new_path)
		# They renamed it somewhere else, so remove it
		if self.tab.files[self.tab.cur].parent != new_path.parent:
			del self.tab.files[self.tab.cur]
			self.tab.fix_cur()
		else:
			self.tab.files[self.tab.cur] = self.tab.files[self.tab.cur].with_name(new_path.name)
			# Re-sort the list
			self.tab.sort(self.tab.current_sort)
			self.tab.focus(new_path.name)

	def do_new_tab(self, directory):
		if len(self.tabs) == 10:
			self.write("\nToo many tabs\n")
			self.display_current_filename()
			return
		self.new_tab(directory)
		self.switch_to_tab(len(self.tabs) - 1)

	def new_tab(self, directory):
		tab = Tab()
		tab.read_directory(directory)
		tab.sort(self.config['general'].get('sort', 'name-asc'))
		self.tabs.append(tab)

	def switch_to_tab(self, idx):
		self.current_tab = idx
		self.write(f"\nTab {idx+1} {self.tab.dir}\n")
		self.display_current_filename()

	def close_tab(self):
		if len(self.tabs) == 1:
			return
		del self.tabs[self.current_tab]
		if self.current_tab > 0:
			self.current_tab -= 1
		self.write(f"\nTab {self.current_tab+1} {self.tab.dir}\n")
		self.display_current_filename()

	def move(self):
		if not self.tab.files:
			return
		self.write('\n')
		dest = self.get_move_dest(f"Move {self.tab.files[self.tab.cur]} to (tab#/directory): ")
		if not dest:
			return
		if not dest.exists():
			self.write(f"Error: {dest} doesn't exist. Create? (y/n)")
			if self.yes_no():
				dest.mkdir(parents=True)
			else:
				return
		source_file = self.tab.files[self.tab.cur]
		dest_file = dest / source_file.name
		if dest_file.exists():
			self.write(f"Error: destination file {dest_file} exists\n")
			return
		code = subprocess.call(['mv', source_file, dest_file])
		if code != 0:
			return # Something went wrong
		self.tab.remove(source_file)
		for tab in self.tabs:
			if tab.dir == dest:
				self.refresh(tab)

	def copy(self):
		if not self.tab.files:
			return
		self.write('\n')
		dest = self.get_move_dest(f"Copy {self.tab.files[self.tab.cur]} to (tab#/directory): ")
		if not dest:
			return
		if not dest.exists():
			self.write(f"Error: {dest} doesn't exist. Create? (y/n)")
			if self.yes_no():
				dest.mkdir(parents=True)
			else:
				return
		source_file = self.tab.files[self.tab.cur]
		dest_file = dest / source_file.name
		if dest_file.exists():
			self.write(f"Error: destination file {dest_file} exists\n")
			return
		code = subprocess.call(['cp', '-a', source_file, dest_file])
		if code != 0:
			return # Something went wrong
		for tab in self.tabs:
			if tab.dir == dest:
				self.refresh(tab)

	def get_move_dest(self, prompt):
		dest = input(prompt)
		if not dest:
			return
		if dest.isdigit():
			tab_idx = int(dest)
			if tab_idx == 0:
				tab_idx = 9
			else:
				tab_idx -= 1
			if len(self.tabs) < tab_idx:
				self.write("Tab not open\n")
				return
			return self.tabs[tab_idx].dir
		else: # not digits
			assert self.tab.dir is not None
			return self.tab.dir / Path(dest)

	def refresh(self, tab):
		if tab.files:
			f = tab.files[tab.cur]
		else:
			f = None
		tab.refresh()
		if f:
			tab.focus(f.name)

	def edit(self):
		if not self.tab.files:
			return
		editor = self.get_editor()
		try:
			subprocess.call([*shlex.split(editor), self.tab.files[self.tab.cur]])
		except OSError as e:
			self.write(f"\nFailed to launch editor: {e.strerror}\n")

	def get_editor(self):
		if editor := self.config['general'].get('editor'):
			return editor
		if editor := os.environ.get('VISUAL'):
			return editor
		return os.environ.get('EDITOR', 'vi')

	def read_config(self):
		self.config.add_section("general")
		self.config['general']['opener'] = os.path.join(sys.path[0], 'opener')
		xdg_config_home = os.environ.get('XDG_CONFIG_HOME', os.path.expanduser('~/.config'))
		config_file = os.path.join(xdg_config_home, 'fm', 'config')
		if not os.path.exists(config_file):
			return
		self.config.read(config_file)
		if 'general' not in self.config:
			self.config.add_section('general')
		if self.config['general'].get('sort') and self.config['general'].get('sort') not in 'name-asc name-desc size-asc size-desc time-asc time-desc'.split():
			print(f"{config_file}: sort must be one of name-asc, name-desc, size-asc, size-desc, time-asc or time-desc.", file=sys.stderr)
			sys.exit(1)

	def read_directory(self, directory):
		self.tab.read_directory(directory)
		self.tab.sort(self.config['general'].get('sort', 'name-asc'))

def main():
	m = FileManager()
	m.read_config()
	for d in sys.argv[1:]:
		try:
			m.new_tab(d)
		except OSError as e:
			print(f"Error loading directory {d}: {e.strerror}")
	if len(m.tabs) == 0 and len(sys.argv) > 1:
		print("Specified directories couldn't be loaded; loading current directory.")
	if len(m.tabs) == 0:
		m.new_tab('.')
	m.run()

if __name__ == '__main__':
	try:
		main()
	finally:
		cols, rows = os.get_terminal_size()
		sys.stdout.write(f"\x1b[r\x1b[{rows};1H")
